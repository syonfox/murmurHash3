module.exports = {
  parser: "@typescript-eslint/parser",
  plugins: ["@typescript-eslint"],
  env: {
    es2021: true,
    node: true,
  },
  globals: {},
  extends: ["prettier"],
  ignorePatterns: [
    "dist",
    "tests",
    "coverage",
    "node_modules",
    ".prettierrc.cjs",
    ".eslintrc.cjs",
    "jest.config.js",
  ],
  parserOptions: {
    ecmaVersion: 2022,
    sourceType: "module",
    project: ["tsconfig.json"],
  },
  rules: {
    "@typescript-eslint/adjacent-overload-signatures": 1,
    "@typescript-eslint/await-thenable": 1,
    "@typescript-eslint/ban-types": [
      "error",
      {
        types: {
          String: {
            message: "Use string instead",
            fixWith: "string",
          },
          Boolean: {
            message: "Use boolean instead",
            fixWith: "boolean",
          },
          Number: {
            message: "Use number instead",
            fixWith: "number",
          },
          Symbol: {
            message: "Use symbol instead",
            fixWith: "symbol",
          },
          Function: {
            message: "The `Function` type accepts any function-like value.",
          },
          Object: {
            message:
              "The `Object` type actually means any non-nullish value, so it is marginally better than `unknown`.",
          },
          "{}": {
            message: "`{}` actually means any non-nullish value.",
          },
        },
      },
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        selector: "default",
        format: ["camelCase", "UPPER_CASE", "snake_case", "PascalCase"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
      {
        selector: "variable",
        format: ["camelCase", "UPPER_CASE", "snake_case", "PascalCase"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
      {
        selector: "typeLike",
        format: ["PascalCase"],
      },
      {
        selector: "property",
        leadingUnderscore: "allow",
        format: null,
      },
    ],
    "@typescript-eslint/no-extra-non-null-assertion": 1,
    "@typescript-eslint/no-inferrable-types": 1,
    "@typescript-eslint/no-misused-new": 1,
    "@typescript-eslint/no-misused-promises": 1,
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": 1,
    "@typescript-eslint/no-non-null-asserted-optional-chain": 1,
    "@typescript-eslint/no-unnecessary-type-assertion": 1,
    "@typescript-eslint/prefer-as-const": 1,
    "@typescript-eslint/prefer-for-of": 1,
    "@typescript-eslint/prefer-includes": 1,
    "@typescript-eslint/prefer-optional-chain": 1,
    "@typescript-eslint/prefer-string-starts-ends-with": 1,
    "@typescript-eslint/restrict-plus-operands": 1,
    "@typescript-eslint/restrict-template-expressions": 0,
    "constructor-super": 1,
    "for-direction": 1,
    "getter-return": 1,
    "no-async-promise-executor": 1,
    "no-class-assign": 1,
    "no-compare-neg-zero": 1,
    "no-constant-condition": 1,
    "no-control-regex": 1,
    "no-debugger": 1,
    "no-dupe-args": 1,
    "no-dupe-class-members": 1,
    "no-dupe-else-if": 1,
    "no-dupe-keys": 1,
    "no-duplicate-case": 1,
    "no-empty-character-class": 1,
    "no-empty-pattern": 1,
    "no-ex-assign": 1,
    "no-fallthrough": 1,
    "no-func-assign": 1,
    "no-import-assign": 1,
    "no-inner-declarations": 1,
    "no-invalid-regexp": 1,
    "no-irregular-whitespace": 1,
    "no-loss-of-precision": 1,
    "no-misleading-character-class": 1,
    "no-nested-ternary": "off",
    "no-new-symbol": 1,
    "no-obj-calls": 1,
    "no-prototype-builtins": 1,
    "no-self-assign": 1,
    "no-sparse-arrays": 1,
    "no-undef": 1,
    "no-unexpected-multiline": 1,
    "no-unreachable": 1,
    "no-unsafe-finally": 1,
    "no-unsafe-negation": 1,
    "no-unsafe-optional-chaining": 1,
    "no-useless-backreference": 1,
    "use-isnan": 1,
    "valid-typeof": 1,
  },
};
